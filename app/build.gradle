apply plugin: 'com.android.application'
apply plugin: 'jacoco'
apply plugin: 'findbugs'
apply plugin: 'checkstyle'
apply plugin: 'pmd'


android {
    compileSdkVersion 25
    buildToolsVersion "25.0.2"
    defaultConfig {
        applicationId "com.application.teletaxiconsole"
        minSdkVersion 19
        targetSdkVersion 25
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug{
            testCoverageEnabled true
        }
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    compile files('libs/gson-2.3.1.jar')
    compile files('libs/org.restlet.ext.httpclient.jar')
    compile files('libs/org.restlet.jar')
    compile files('libs/commons-codec-1.10.jar')

    compile 'com.android.support:appcompat-v7:25.3.1'
    compile 'com.android.support:design:25.3.1'
    compile 'com.android.support.constraint:constraint-layout:1.0.2'
    compile 'com.google.android.gms:play-services-maps:11.0.2'
    testCompile 'junit:junit:4.12'
}

task findbugs(type: FindBugs) {
    description 'Run findbugs'
    group 'verification'
    classes = fileTree('build/intermediates/classes/debug/')
    source = fileTree('src/main/java')
    classpath = files()
    effort = 'max'
    reportLevel = "high"
    ignoreFailures = true
    reports {
        xml.enabled = false
        html.enabled = true
        html {
            destination "$project.buildDir/reports/findbugs/findbugs-output.html"
        }
    }
}

task pmd(type: Pmd) {
    ignoreFailures = true
    ruleSetFiles = files("config/quality/pmd/pmd-ruleset.xml")
    //ruleSets = []

    //source 'src'
    source = fileTree('src/main/java')
    include '**/*.java'
    exclude '**/gen/**'

    reports {
        xml.enabled = false
        html.enabled = true
        html {
            destination "$project.buildDir/reports/pmd/pmd.html"
        }
    }
}

task checkstyle(type: Checkstyle) {
    ignoreFailures = true
    configFile file("config/quality/checkstyle/checkstyle.xml")
    //source = fileTree('src/main/java')
    source = fileTree('src/main/java')
    include '**/*.java'
    exclude '**/gen/**'
    classpath = files()
    reports {
        xml.enabled false
        html.enabled = true
    }
}
